const http = require('http');
const https = require('https');
const fs = require('fs');
const path = require('path');
const mime = require('mime');

const hostname = '127.0.0.1';
const port = 3000;

const server = http.createServer((req, res) => {
  res.setHeader('Access-Control-Allow-Origin', '*');

  // 检查请求的 URL 是否有效
  const validURLs = ['/index.html', '/html/introduce.html', '/error.html']; // 根据实际情况添加有效的 URL
  const url = req.url === '/' ? '/index.html' : req.url; // 处理根路径

  if (!validURLs.includes(url)) {
    // 如果 URL 无效，则重定向到主页
    res.writeHeader(302, {
      'Location': '/index.html'
    });
    res.end();
    return;
  }

  // 如果 URL 有效，则继续读取静态文件
  let pathname = path.join(__dirname, url);
  readStaticFile(res, pathname);

  function readStaticFile(res, pathname) {
    var ext = path.parse(pathname).ext;
    var mimeType = mime.getType(ext);
    if (ext) {
      fs.readFile(pathname, function (err, data) {
        if (err) {
          // Handle file read error
          res.writeHeader(500, {
            'Content-Type': 'text/plain'
          });
          res.end('Internal Server Error');
        } else {
          res.writeHeader(200, {
            'content-type': `${mimeType || 'text/plain'};charset="utf-8"`,
          });
          res.write(data);
          res.end();
        }
      });
    }
  }
});

// 代理请求到 Bing


server.listen(port, hostname, () => {
  console.log(`服务器运行在 http://${hostname}:${port}/`);
});
